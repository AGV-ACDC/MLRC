#+title: Editorial Organization
#+PROPERTY: header-args:jupyter-python :session /Users/koustuvs/Library/Jupyter/runtime/kernel-561816cd-550a-4f7d-9688-80e29664243d.json :kernel python3 :async yes :exports output


* Checklist for each paper
- Correct SWH id
- Remove the 000 DOI
- Add journal number
  - Volume: 8, Issue: 2
  - Accepted date: April 11, 2022
  - Publication date: May 23, 2022
- Total Papers: 47 + 1 (for editorial)

* DONE Investigate the code DOI case
CLOSED: [2022-05-15 Sun 20:53]

Dependency: ruamel

#+begin_src jupyter-python :session /Users/koustuvs/Library/Jupyter/runtime/kernel-561816cd-550a-4f7d-9688-80e29664243d.json
from ruamel import yaml
import glob
import os

# print(os.chdir("2021/"))
metadata_files = glob.glob("**/journal/metadata.yaml")
metadata_files = [x for x in metadata_files if "template" not in x]
metadata_files = [x for x in metadata_files if "editorial" not in x]

print("Total projects: ", len(metadata_files))

issues = []
for mfile in metadata_files:
    try:
        paper = mfile.split("/")[0]
        meta = yaml.safe_load(open(mfile))
        code_items = {k: v for d in meta["code"] for k, v in d.items()}
        print(paper, code_items["doi"])
    except:
        issues.append(paper)

print(f"Found {len(issues)}")
print(issues)
#+end_src

#+RESULTS:
#+begin_example
Total projects:  47
jiles2022re 10.5281/zenodo.6529518
ashok2022re 10.5281/zenodo.6508499
brivio2022reproducibility 10.5281/zenodo.6502870
geijn2022reproducibility 10.5281/zenodo.6508290
athanasiadis2022weaklysupervised None
petcu2022replication None
sen2022reproducibility 10.5281/zenodo.6511007
lombardo2022on None
hardy2022re 10.5281/zenodo.6506696
rucks2022re None
panigrahi2022re None
kolkman2022strategic None
buvanesh2022re None
nalmpantis2022re 10.5281/zenodo.6505214
warmerdam2022re 10.5281/zenodo.6482966
stropnik2022re 10.5281/zenodo.6505384
dasu2022reproduction 10.5281/zenodo.6511501
mast2022replication 10.5281/zenodo.6518051
trojer2022transparent 10.5281/zenodo.6475970
yilmaz2022re None
mikler2022comparing 10.5281/zenodo.6519109
vleuten2022re 10.5281/zenodo.6512392
drabent2022replication 10.5281/zenodo.6508136
zrimsek2022learning 10.5281/zenodo.6511807
nilsson2022replicating None
boer2022reproducibility 10.5281/zenodo.6501845
dzubur2022re None
wilschut2022reproducibility None
kirca2022reproducibility 10.5281/zenodo.6491095
bagad2022reproducibility None
wang2022replication 10.5281/zenodo.6515893
eijkelboom2022reproduction 10.5281/zenodo.6508390
mehta2022re None
matsumoto2022re None
korporaal2022replication 10.5281/zenodo.6508302
hoppe2022re 10.5281/zenodo.6508184
neplenbroek2022replication 10.5281/zenodo.6501799
ranjan2022re 10.5281/zenodo.6475614
eaton2022reproduction None
tersek2022re 10.5281/zenodo.6508260
shukla2022from None
peters2022reproducing 10.5281/zenodo.6479342
ankit2022counterfactual None
burger2022reproducibility None
ahmed2022re None
luisa2022thompson 10.5281/zenodo.6498328
togt2022badder 10.5281/zenodo.6480966
Found 0
[]
#+end_example
* DONE Investigate code SWH
CLOSED: [2022-05-15 Sun 21:01]

#+begin_src jupyter-python
from ruamel import yaml
import glob


metadata_files = glob.glob("**/journal/metadata.yaml")
metadata_files = [x for x in metadata_files if "template" not in x]
metadata_files = [x for x in metadata_files if "editorial" not in x]

print(len(metadata_files))

issues = []
for mfile in metadata_files:
    try:
        paper = mfile.split("/")[0]
        meta = yaml.safe_load(open(mfile))
        code_items = {k: v for d in meta["code"] for k, v in d.items()}
        print(paper, code_items["swh"])
        print("------")
    except:
        issues.append(paper)

print(f"Found {len(issues)}")
print(issues)
#+end_src

#+RESULTS:
#+begin_example
47
jiles2022re swh:1:dir:08875ab42adddf57b8019c82f4e5889d1009743c
------
ashok2022re swh:1:dir:90d1c4d52eec769a1a18df5bd1f8bd0955f0ac24
------
brivio2022reproducibility swh:1:dir:d61b47330cc5c92d7ac4873269faa38a2e3c20bd
------
geijn2022reproducibility swh:1:dir:f0871f3a14e536717d3225180942c4a385ce39e3
------
athanasiadis2022weaklysupervised swh:1:dir:95342519c89e6957f4f90ee7e51d8724a48d9a56
------
petcu2022replication swh:1:dir:da9cb18759db5ecf30608639d8b35a4b247a483d
------
sen2022reproducibility swh:1:dir:ba72ac2acf3bac942d9b3a66e51091e6bcce6617
------
lombardo2022on swh:1:dir:b775237e47e9de16827cb9cae83423d090faa4f8
------
hardy2022re swh:1:dir:bd6142ce2ce3fd99fab9918a6c6754115035abe4
------
rucks2022re swh:1:dir:0a7ba3d1b8f4d4e2ee09a62ddfbe2e8a124d6b1e
------
panigrahi2022re swh:1:dir:4d43ea96458cc573dd2b57208fae0b12f8da896f
------
kolkman2022strategic swh:1:dir:31ff8f4d7da6e70c88e4d28ba0c18ee5f04ac424;
------
buvanesh2022re swh:1:dir:53eeebe14e9d02d912fc3c58c375b5095e8db941
------
nalmpantis2022re swh:1:dir:224b71f5d3c02f260427e2f7c492b6db98c65638
------
warmerdam2022re swh:1:dir:30aff8e620b5a2f17c4ec653b4b6fe80272fdaff
------
stropnik2022re swh:1:dir:a48bde44f1ef0b6f060687ea7b8b164a97b0931e
------
dasu2022reproduction swh:1:dir:4dc4de7856350a4671d97840c5f9ae013c275112
------
mast2022replication swh:1:dir:45176f5005ed390a349cd01e61ed37711095879e
------
trojer2022transparent swh:1:dir:b80fa866c01389a46dde8b6f419d893d127f1025
------
yilmaz2022re swh:1:dir:c4289f0be8edafa7d050efc178bd1bc9bed0bbdc
------
mikler2022comparing swh:1:dir:886a4c9a0bdecdbf65f2cab3ae7404a6796bc451
------
vleuten2022re swh:1:dir:04e11a55f476b115b40fd6af9d06ed70eb248535
------
drabent2022replication swh:1:dir:1b0c9cb880eedcbdfb56c51afc8ed74ba437e14b
------
zrimsek2022learning swh:1:dir:6eedc394f714587f35840bee0aac3e675bfa6c5a
------
nilsson2022replicating swh:1:dir:531d1456baa3bb553ce549785158be7005c682c7
------
boer2022reproducibility swh:1:rev:3beaa469b32b376f92b0fbae34493cdbe0e2ee3c
------
dzubur2022re swh:1:dir:407d517fb5299301bcfc7f8aa461a4c3bf7c36b0
------
wilschut2022reproducibility swh:1:dir:5744faf1da0fd9b520c8aa72a0608b78f0a91e7a
------
kirca2022reproducibility swh:1:dir:25564a437957494e991b5205e262159e75d84d59;
------
bagad2022reproducibility swh:1:dir:410075522df668dfae4742564f10b62de0cb8dc6
------
wang2022replication swh:1:dir:78ac8ec89fd95397fd635e8d9e885e1d5ac6c039
------
eijkelboom2022reproduction swh:1:dir:016245babcdc02c28ac98547de32f7270c79f81f
------
mehta2022re swh:1:dir:24495d2fbb5d4af66607261c2171ed42173a72cf
------
matsumoto2022re swh:1:dir:4116fecf6ec4ac207cdad025ec62b25839a75678
------
korporaal2022replication swh:1:dir:1d0dbddb7bc7060aee89621b45cea15325dca1b1
------
hoppe2022re swh:1:dir:ec5169f4713c6c67088d980c76f1c25bc1c399bc
------
neplenbroek2022replication swh:1:dir:f5439c1a7a15c4eb709da6f32eb252679a1d44bd
------
ranjan2022re swh:1:dir:6aa6080e642126b1166661d245a4f594a777889b
------
eaton2022reproduction swh:1:dir:320f7080ccd0edd611da07e9dbd9dbe4bbd18758
------
tersek2022re swh:1:dir:cf19f5a717c777cd1097e938ef4e6bdb735f71c7
------
shukla2022from swh:1:dir:3ddeeb8325dbac3f85d05e49621a9adef5f44ebb
------
peters2022reproducing swh:1:dir:effcbb5800e91db9053cb59c68bbc097a10da7cf
------
ankit2022counterfactual swh:1:dir:88d89da0661c0f855f7b6f27c77acac1c2572a93
------
burger2022reproducibility swh:1:dir:a294d795e2f9e00a93e9955b70c86a28b1c310d0
------
ahmed2022re swh:1:dir:75ebcdb9cee4f17c5440b6ca9fd2c6901a929aea
------
luisa2022thompson swh:1:dir:d1d7fa93e952cf14154d5415f253b6507af22833
------
togt2022badder swh:1:dir:13ff45fd249e765a221d49f701c32d45b64ee675
------
Found 0
[]
#+end_example



* Do we have all projects?

Check if all teams submitted their projects.

#+begin_src bash
pip install bibtexparser
#+end_src

#+RESULTS:
| Requirement | already | satisfied: | bibtexparser     | in | /Users/koustuvs/miniconda3/lib/python3.8/site-packages | (1.2.0) |               |          |
| Requirement | already | satisfied: | future>=0.16.0   | in | /Users/koustuvs/miniconda3/lib/python3.8/site-packages | (from   | bibtexparser) | (0.18.2) |
| Requirement | already | satisfied: | pyparsing>=2.0.3 | in | /Users/koustuvs/miniconda3/lib/python3.8/site-packages | (from   | bibtexparser) | (3.0.6)  |

#+begin_src jupyter-python
import bibtexparser

with open('accepted.bib') as bibtex_file:
    bib_database = bibtexparser.load(bibtex_file)

print(len(bib_database.entries))

bibkeys = set(bib_database.entries_dict.keys())
print(bibkeys - set(article_number.keys()))
#+end_src

#+RESULTS:
: 48
: {'ezard2022comprehensive'}

So one guy decided to not submit a camera ready version!

* Pre Publishing Steps

** Zenodo Access Tokens

Get access tokens from Zenodo, and then populate here.

*** Sandbox

#+begin_src bash
export ZENODO_SANDBOX_TOKEN=""
#+end_src

#+RESULTS:

*** Production

#+begin_src bash
export ZENODO_TOKEN=""
#+end_src

#+RESULTS:

*** In python

#+begin_src jupyter-python
zenodo_tokens = {
    'sandbox': "",
    'production': ""
}
#+end_src

#+RESULTS:

** Reserve DOI

#+begin_src jupyter-python
import json
import yaml
import requests

def reserve_doi(server, token):
    """ Reserve a new DOI on Zenodo """

    headers = { "Content-Type": "application/json" }
    url = f'https://{server}/api/deposit/depositions'
    response = requests.post(url, params={'access_token': token},
                             json={}, headers=headers)
    if response.status_code != 201:
        raise IOError("%s: " % response.status_code +
                      str(response))
    data = response.json()
    return data["id"], data["metadata"]["prereserve_doi"]["doi"]
#+end_src

#+RESULTS:

*** Test Reserve DOI

#+begin_src jupyter-python

zenodo_url = {
    "sandbox": "sandbox.zenodo.org",
    "production": "zenodo.org"
}

def reserve_zenodo_info(server="sandbox"):
    server_url = zenodo_url[server]
    token = zenodo_tokens[server]
    article_id, article_doi = reserve_doi(server_url, token)
    article_url = f"https://{server_url}/record/{article_id}/files/article.pdf"
    return article_id, article_doi, article_url
#+end_src

#+RESULTS:


#+begin_src jupyter-python
print(reserve_zenodo_info("production"))
#+end_src

#+RESULTS:
: (6574616, '10.5281/zenodo.6574616', 'https://zenodo.org/record/6574616/files/article.pdf')
* Add journal metadata

The following script automatically updates the metadata.yaml files with the publishing information, and reserves the DOI from Zenodo. Test this script first setting "zenodo_server" to "sandbox".

#+begin_src jupyter-python
import glob
import re

metadata_files = glob.glob("**/journal/metadata.yaml")
metadata_files = [x for x in metadata_files if "template" not in x]
metadata_files = [x for x in metadata_files if "editorial" not in x]

print(len(metadata_files))

def update_line(lines, search, dest):
    dt_line = [i for i,line in enumerate(lines) if search in line]
    assert len(dt_line) == 1, f"Found {len(dt_line)} matches"
    lines[dt_line[0]] = dest
    return lines

def update_article(lines, doi="", url=""):
    article_start = [i for i, line in enumerate(lines) if line.startswith("article:")]
    article_end = [i for i, line in enumerate(lines) if line.startswith("journal:")]
    assert len(article_start) == 1
    assert len(article_end) == 1
    article_start = article_start[0]
    article_end = article_end[0] - 2
    doi_line = [i for i, line in enumerate(lines) if (i > article_start and i < article_end and "doi:" in line)]
    assert len(doi_line) == 1
    doi_line = doi_line[0]
    url_line = [i for i, line in enumerate(lines) if (i > article_start and i < article_end and "url:" in line)]
    assert len(url_line) == 1
    url_line = url_line[0]

    lines[doi_line] = f"  - doi: {doi}\n"
    lines[url_line] = f"  - url: {url}\n"
    return lines


issues = []
article_number = {}
metadata_files = list(sorted(metadata_files))
metadata_files.append("editorial/journal/metadata.yaml")

zenodo_server = "production"

# debug
# metadata_files = [metadata_files[0]]

for mfile in metadata_files:
    try:
        paper = mfile.split("/")[0]
        ## load the paper
        lines = []
        with open(mfile) as fp:
            for line in fp:
                lines.append(line)

        ## sequential updates
        if paper != "editorial":
            lines = update_line(lines, "received:", "  - received:  February 4, 2022\n")
            lines = update_line(lines, "accepted:", "  - accepted:  April 11, 2022\n")
        lines = update_line(lines, "published:", "  - published:  May 23, 2022\n")
        # lines = update_line(lines, "- name: Koustuv Sinha", "  - name: Koustuv Sinha,\\\\ Sharath Chandra Raparthy\n")

        article_number[paper] = len(article_number) + 1

        lines =  update_line(lines, "number:", f"  - number: {article_number[paper]}\n")
        lines = update_line(lines, "volume:", "  - volume: 8\n")
        lines = update_line(lines, "issue:", "  - issue: 2\n")

        # Update DOI
        ## fetch from Zenodo

        article_id, article_doi, article_url = reserve_zenodo_info(zenodo_server)
        lines = update_article(lines, doi=article_doi, url=article_url)

        # update file
        with open(mfile, "w") as fp:
            for line in lines:
                fp.write(line)

    except Exception as e:
        issues.append(paper)
        raise(e)

print(f"Found {len(issues)}")
print(issues)
#+end_src

#+RESULTS:
: 47
: Found 0
: []


* Final inspection [47/47]
** DONE ahmed2022re
CLOSED: [2022-05-19 Thu 22:09]
** DONE ankit2022counterfactual
CLOSED: [2022-05-20 Fri 14:38]
** DONE ashok2022re
CLOSED: [2022-05-21 Sat 12:15]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE athanasiadis2022weaklysupervised
CLOSED: [2022-05-20 Fri 14:46]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE bagad2022reproducibility
CLOSED: [2022-05-20 Fri 14:47]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE boer2022reproducibility
CLOSED: [2022-05-20 Fri 14:47]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE brivio2022reproducibility
CLOSED: [2022-05-20 Fri 14:51]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE burger2022reproducibility
CLOSED: [2022-05-20 Fri 14:51]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE buvanesh2022re
CLOSED: [2022-05-20 Fri 14:52]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE dasu2022reproduction
CLOSED: [2022-05-20 Fri 14:54]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE drabent2022replication
CLOSED: [2022-05-20 Fri 14:54]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE dzubur2022re
CLOSED: [2022-05-20 Fri 14:55]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE eaton2022reproduction
CLOSED: [2022-05-20 Fri 15:00]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE eijkelboom2022reproduction
CLOSED: [2022-05-20 Fri 15:01]
** DONE geijn2022reproducibility
CLOSED: [2022-05-20 Fri 15:01]
** DONE hardy2022re
CLOSED: [2022-05-20 Fri 15:02]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE hoppe2022re
CLOSED: [2022-05-20 Fri 15:02]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE jiles2022re
CLOSED: [2022-05-20 Fri 15:04]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE kirca2022reproducibility
CLOSED: [2022-05-20 Fri 15:04]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE kolkman2022strategic
CLOSED: [2022-05-20 Fri 15:05]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE korporaal2022replication
CLOSED: [2022-05-20 Fri 16:02]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE lombardo2022on
CLOSED: [2022-05-20 Fri 15:32]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE luisa2022thompson
CLOSED: [2022-05-20 Fri 16:05]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE mast2022replication
CLOSED: [2022-05-20 Fri 16:06]
** DONE matsumoto2022re
CLOSED: [2022-05-20 Fri 16:06]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE mehta2022re
CLOSED: [2022-05-20 Fri 16:07]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE mikler2022comparing
CLOSED: [2022-05-20 Fri 16:08]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE nalmpantis2022re
CLOSED: [2022-05-20 Fri 16:09]
** DONE neplenbroek2022replication
CLOSED: [2022-05-20 Fri 16:09]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE nilsson2022replicating
CLOSED: [2022-05-20 Fri 16:10]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE panigrahi2022re
CLOSED: [2022-05-20 Fri 16:14]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE petcu2022replication
CLOSED: [2022-05-20 Fri 16:15]
** DONE peters2022reproducing
CLOSED: [2022-05-20 Fri 16:16]
** DONE ranjan2022re
CLOSED: [2022-05-20 Fri 16:16]
** DONE rucks2022re
CLOSED: [2022-05-20 Fri 16:18]
** DONE sen2022reproducibility
CLOSED: [2022-05-20 Fri 16:26]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE shukla2022from
CLOSED: [2022-05-20 Fri 16:35]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE stropnik2022re
CLOSED: [2022-05-20 Fri 16:39]
:PROPERTIES:
:ACTIVATED: [2022-05-20]
:END:
** DONE tersek2022re
CLOSED: [2022-05-20 Fri 16:41]
** DONE togt2022badder
CLOSED: [2022-05-20 Fri 16:41]
** DONE trojer2022transparent
CLOSED: [2022-05-20 Fri 16:42]
** DONE vleuten2022re
CLOSED: [2022-05-20 Fri 16:42]
** DONE wang2022replication
CLOSED: [2022-05-20 Fri 16:42]
** DONE warmerdam2022re
CLOSED: [2022-05-20 Fri 16:43]
** DONE wilschut2022reproducibility
CLOSED: [2022-05-20 Fri 16:45]
** DONE yilmaz2022re
CLOSED: [2022-05-20 Fri 16:46]
** DONE zrimsek2022learning
CLOSED: [2022-05-20 Fri 16:46]
